import grpc
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
from states import Form

from bot.logger import logger
from bot.services import (
    DetectHandler,
    PhotoProcessor,
    PlantDiagnostics,
    PredictionService,
)

predict_router = Router(name=__name__)


@predict_router.message(Command("predict"))
async def cmd_predict(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–º–∏–¥–æ—Ä"), KeyboardButton(text="–û–≥—É—Ä–µ—Ü")],
                [KeyboardButton(text="–î—ã–Ω—è"), KeyboardButton(text="–ê—Ä–±—É–∑")],
                [KeyboardButton(text="–ö–ª—É–±–Ω–∏–∫–∞"), KeyboardButton(text="–ü–µ—Ä–µ—Ü")],
            ],
            resize_keyboard=True,
        ),
    )

    await state.set_state(Form.predict)


@predict_router.message(Form.predict)
async def handle_plant_selection(message: Message, state: FSMContext) -> None:
    await state.update_data(predict=message.text)
    data = await state.get_data()

    if data["predict"] not in [
        "–ü–æ–º–∏–¥–æ—Ä",
        "–î—ã–Ω—è",
        "–ö–ª—É–±–Ω–∏–∫–∞",
        "–û–≥—É—Ä–µ—Ü",
        "–ê—Ä–±—É–∑",
        "–ü–µ—Ä–µ—Ü",
    ]:
        await message.answer("‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        await cmd_predict(message, state)
        return

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {data['predict']}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=ReplyKeyboardRemove(),
    )

    await state.set_state(Form.predict_get_photo)


@predict_router.message(Form.predict_get_photo, F.photo)
async def handle_get_photo(message: Message, state: FSMContext) -> None:
    await state.update_data(predict_get_photo=message.photo[-1].file_id)
    data = await state.get_data()

    # Save the photo to a temporary file.
    try:
        image_path = await PhotoProcessor.save_photo_to_tempfile(
            data=data,
            message=message,
        )
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.")
        return

    await message.answer("üîÑ –ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ...")

    # Detect objects in the image.
    try:
        detect_handler = await DetectHandler.get_instance(
            model_path="models/leaf_detect.pt",
        )

        detection_boxes, photo = await detect_handler.detect(image_path)
        detection_count = len(detection_boxes)

        if detection_count:
            logger.info(f"Detected {detection_count} objects.")
            await message.answer(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {detection_count}")
        else:
            logger.info("No objects detected.")
            await message.answer("–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return

        await message.reply_photo(
                photo=photo,
                caption="üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã",
            )

        await state.clear()

    except Exception as e:
        logger.error(f"Error during detection: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤.")
        await state.clear()
        return

    # Make predictions based on the detected objects.
    try:
        predict_result = await PredictionService.predict(
            data=data,
            detection_boxes=detection_boxes,
        )

        plant_diagnostics = PlantDiagnostics()
        report = await plant_diagnostics.analyze_and_report(
            results=predict_result,
            plant_type=data["predict"].lower(),
        )

        if not report:
            await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û—Ç—á–µ—Ç –ø—É—Å—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        else:
            for item in report:
                await message.answer(item)

    except ConnectionError as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Connection error: {e}")
        await state.clear()
    except grpc.RpcError as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.details()}"
        await message.answer(error_message)
        logger.error(f"gRPC error: {e}")
        await state.clear()
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logger.error(f"Unexpected error: {e}")
        await state.clear()


@predict_router.message(Form.predict_get_photo)
async def handle_invalid_input(message: Message) -> None:
    """Handle invalid input when a photo is expected."""
    await message.answer("‚ùå –Ø –æ–∂–∏–¥–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
